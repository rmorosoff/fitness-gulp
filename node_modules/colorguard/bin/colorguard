#!/usr/bin/env node
var yargs = require('yargs');
var fs = require('fs');
var path = require('path');
var stdin = process.stdin;
var stdout = process.stdout;
var stderr = process.stderr;
var argv = yargs.argv;
var sourceMapResolve = require('source-map-resolve');

yargs
.describe('file', 'A CSS file')
.describe('threshold', 'Threshold of allowable color difference')
.describe('options', 'An optional JSON file containing all options (Overrides `--threshold`)')
.describe('format', 'Output type to full json')
.usage('Usage: colorguard --file [style.css] ');

process.title = 'colorguard';

var colorguard = require('..');
var css = [];
var options;

if (argv.file) {
  css = fs.readFileSync(path.resolve(process.cwd(), argv.file), 'utf8');
  sourceMapResolve.resolve(css, argv.file, fs.readFile, function (error, result) {
    run(css, result && result.map);
  });
}
else {
  stdin.setEncoding('utf8');

  if (process.stdin.isTTY) {
    yargs.showHelp();
  }
  else {
    stdin.on('data', function(chunk) {
      css.push(chunk);
    });

    stdin.on('end', function() {
      css = css.join();
      run(css);
    });
  }
}

function run(css, map) {
  if (argv.options) {
    options = JSON.parse(fs.readFileSync(path.resolve(process.cwd(), argv.options), 'utf8'));
  }
  else {
    options = {
      threshold: argv.threshold,
    };
  }

  var output;

  try {
    output = colorguard.inspect(css, options, map);
  }
  catch (e) {
    stderr.write('There was an error processing the CSS.\n' + e.toString() + '\n');
    return;
  }

  if (argv.format && argv.format.toLowerCase() === 'json') {
    stdout.write(JSON.stringify(output) + '\n');
  }
  else {
    if (!output.collisions.length) {
      stdout.write('There are no collisions.\n');
    }
    else {
      output.collisions.forEach(function(collision) {
        var pair = collision.colors.map(function(color) { return color.rgb; });
        stdout.write('Collision: ' + pair.join(', ') + '\n  - ' + collision.message + '\n\n');
      });
    }
  }
}
